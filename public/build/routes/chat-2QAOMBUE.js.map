{
  "version": 3,
  "sources": ["../../../app/routes/chat.tsx", "../../../app/components/Chat.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\chat.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\chat.tsx\");\n  import.meta.hot.lastModified = \"1756274455239.803\";\n}\n// REMIX HMR END\n\n// app/routes/chat.tsx\nimport { redirect } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { Chat } from '~/components/Chat';\nimport { verifyToken } from '~/services/auth.server';\nimport { getSession } from '~/session.server';\nimport { connectToDatabase } from '~/services/db.server';\nimport { User } from '~/models/User';\nimport { Message } from '~/models/Message';\nexport const loader = async ({\n  request\n}) => {\n  await connectToDatabase();\n  const session = await getSession(request.headers.get('Cookie'));\n  const token = session.get('token');\n  if (!token) {\n    return redirect('/login');\n  }\n  const decoded = verifyToken(token);\n  if (!decoded) {\n    return redirect('/login');\n  }\n  const user = await User.findById(decoded.userId);\n  if (!user) {\n    return redirect('/login');\n  }\n\n  // Get messages from MongoDB\n  const messages = await Message.find().sort({\n    timestamp: 1\n  }) // Oldest first\n  .limit(50).exec();\n  return {\n    messages: messages.map(msg => ({\n      _id: msg._id.toString(),\n      content: msg.content,\n      sender: msg.sender,\n      timestamp: msg.timestamp\n    })),\n    username: user.username\n  };\n};\nexport const action = async ({\n  request\n}) => {\n  await connectToDatabase();\n  const session = await getSession(request.headers.get('Cookie'));\n  const token = session.get('token');\n  if (!token) {\n    return redirect('/login');\n  }\n  const decoded = verifyToken(token);\n  if (!decoded) {\n    return redirect('/login');\n  }\n  const user = await User.findById(decoded.userId);\n  if (!user) {\n    return redirect('/login');\n  }\n  const formData = await request.formData();\n  const messageContent = formData.get('message');\n\n  // Save message to MongoDB\n  const newMessage = new Message({\n    content: messageContent,\n    sender: user.username\n  });\n  await newMessage.save();\n  return {\n    newMessage: {\n      _id: newMessage._id.toString(),\n      content: newMessage.content,\n      sender: newMessage.sender,\n      timestamp: newMessage.timestamp\n    }\n  };\n};\nexport default function ChatRoute() {\n  _s();\n  const data = useLoaderData();\n  return <div className=\"chat-page\">\r\n      <header className=\"chat-header\">\r\n        <h1>Chat App</h1>\r\n        <form action=\"/logout\" method=\"post\">\r\n          <button type=\"submit\" className=\"logout-button\">\r\n            Logout\r\n          </button>\r\n        </form>\r\n      </header>\r\n      <Chat messages={data.messages} username={data.username} />\r\n    </div>;\n}\n_s(ChatRoute, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = ChatRoute;\nvar _c;\n$RefreshReg$(_c, \"ChatRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\Chat.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\Chat.tsx\");\n  import.meta.hot.lastModified = \"1756281181793.331\";\n}\n// REMIX HMR END\n\nimport { useFetcher } from '@remix-run/react';\nimport { useState, useEffect, useRef } from 'react';\nexport function Chat({\n  messages: initialMessages,\n  username\n}) {\n  _s();\n  const [messages, setMessages] = useState(initialMessages);\n  const fetcher = useFetcher();\n  const messageEndRef = useRef(null);\n  useEffect(() => {\n    messageEndRef.current?.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  useEffect(() => {\n    if (fetcher.data?.newMessage) {\n      setMessages(prev => [...prev, fetcher.data.newMessage]);\n    }\n  }, [fetcher.data]);\n  return <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <h2>Chat Room</h2>\r\n        <span>Welcome, {username}!</span>\r\n      </div>\r\n\r\n      <div className=\"messages-container\">\r\n        {messages.map(message => <div key={message._id} className={`message ${message.sender === username ? 'own-message' : 'other-message'}`}>\r\n            <div className=\"message-sender\">{message.sender}</div>\r\n            <div className=\"message-content\">{message.content}</div>\r\n            <div className=\"message-time\">\r\n              {new Date(message.timestamp).toLocaleTimeString()}\r\n            </div>\r\n          </div>)}\r\n        <div ref={messageEndRef} />\r\n      </div>\r\n\r\n      <fetcher.Form method=\"post\" className=\"message-form\">\r\n        <input type=\"text\" name=\"message\" placeholder=\"Type your message...\" required className=\"message-input\" />\r\n        <button type=\"submit\" className=\"send-button\">\r\n          Send\r\n        </button>\r\n      </fetcher.Form>\r\n    </div>;\n}\n_s(Chat, \"Un53X9R2BV1EbgqGMpE5StLrawQ=\", false, function () {\n  return [useFetcher];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "_s", "_s", "_c"]
}
